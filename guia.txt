-- comandos dotnet

    dotnet -h
    dotnet new -h
    criar novo  projeto: dotnet new webapi
    rodar o projeto: dotnet run
    assistir arquivos e auto compilar caso seja modificado: watch
    restaurar pacotes do projeto: dotnet restore

-- add swagger

    buscar: Swashbuckle.AspNetCore 1.1.0 

    instalar: dotnet add package Swashbuckle.AspNetCore --version 1.1.0

    services.AddMvc();

    services.AddSwaggerGen(c =>
    {
        c.SwaggerDoc("v1", new Info { Title = "My API", Version = "v1" });
    });

    ---------

    app.UseSwagger();

    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
    });

-- redirect url

    var option = new RewriteOptions();
                option.AddRedirect("^$", "swagger");

                app.UseRewriter(option);

-- Adicionando MySql Server a nossa webapi

    instalar o pacote do Pamelo:
    dotnet add package Pomelo.EntityFrameworkCore.MySql --version 2.2.6

    startup.cs
    services.AddDbContext<ProjetoWebValeDbContext>(options =>
                options.UseMySql(Configuration.GetConnectionString("DefaultConnection")));

    appsettings.json
    "ConnectionStrings": {
        "DefaultConnection": "server=localhost;port=3306;database=webvaledb;uid=root;password=onepiece"
    },

-- Fazendo alterações no modelo

    - Convenções - Infere propriedades e características com base na convenção padrão

    - Anotações - Usa DataAnnotations para adicionar características
        using System.ComponentModel.DataAnnotations;
        [Required]
        [MaxLength(255)]
        [ForeignKey("Nome_da_propriedade_chave")]

    - Fluent API - Usa Configurações em tempo de execução para adicionar características
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Criar chave composta -> Composite Key
            modelBuilder.Entity<Nome_da_Entidade>()
                .HasKey(c => new { c.Chave_1, c.Chave_2 });
        }


-- comandos EntityFrameworkCore

    add migration: dotnet ef migrations add nome_da_migration
    remover a última migration: dotnet ef migrations remove
    atualizar o banco: dotnet ef database update

-- evitar loops no Json
    services.AddMvc().AddJsonOptions(
        options => options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
        );